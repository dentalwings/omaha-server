AWSTemplateFormatVersion: 2010-09-09
Description: This template creates an omaha server as Beanstalk application. It requires a Route53 managed DNSZone create DNS Records and enable AWS CertificateManager to issue public valid SSL Certificates.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "DNS Zone Information"
        Parameters:
          - DNSZoneId
          - DNSZoneDomain
      -
        Label:
          default: "Omaha Server Settings"
        Parameters:
          - AppS3Bucket
          - AppS3Path
      -
        Label:
          default: "Optional Omaha Server Settings"
        Parameters:
          - DjangoSettingsModule
          - SentryDSN
          - CustomPublicDNSHostname
          - CustomPrivateDNSHostname
          - CUPRequestValidation
          - CrashTracker
          - LogStashHost
          - LogStashPort
          - ELKHost
          - ELKPort
          - EmailSender
          - EmailRecipients
          - RedisDB
          - RedisStatDB
      -
        Label:
          default: "Optional Scaling/Security Parameters"
        Parameters:
          - RedisClusterNodes
          - RedisInstanceType
          - OmahaInstanceType
          - OmahaASGMinSize
          - OmahaASGMaxSize
          - OmahaSecretKey
          - DBInstanceType
          - DBUsername
          - DBName
          - DBPassword
          - Tags
          - SSHKeyPairName

Parameters:
  DNSZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: HostZoneID from DNS
  DNSZoneDomain:
    Type: String
    Description: HostZoneDomain of DNSZoneId
  CustomPublicDNSHostname:
    Type: String
    Default: ''
    Description: Custom Public DNS Hostname, which overrides the dynamic generated one
  CustomPrivateDNSHostname:
    Type: String
    Default: ''
    Description: Custom Private DNS Hostname, which overrides the dynamic generated one
  RedisClusterNodes:
    Type: Number
    MinValue: 1
    Default: 1
    Description: Number of Redis Cluster Nodes
  OmahaASGMinSize:
    Type: Number
    MinValue: 1
    Default: 1
    Description: MinSize of Beanstalk Autoscaling Group
  OmahaASGMaxSize:
    Type: Number
    MinValue: 1
    Default: 1
    Description: MaxSize of Beanstalk Autoscaling Group
  OmahaInstanceType:
    Type: String
    Default: t2.small
    Description: InstanceClass for Beanstalk Autoscaling Group
  DBInstanceType:
    Type: String
    Default: db.t2.small
    Description: InstanceClass for PostgreSQL DB
  RedisStatDB:
    Type: Number
    Default: 15
    MinValue: 1
    MaxValue: 15
    Description: REDIS_STAT_DB
  RedisDB:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 15
    Description: REDIS_DB
  OmahaSecretKey:
    Type: String
    Default: 'asdfghjklqwertzuiop'
    Description: Secret Key for Django Session Encryption
    NoEcho: true
  RedisInstanceType:
    Type: String
    Default: cache.t2.micro
    Description: InstanceClass for each Redis node.
  SSHKeyPairName:
    Type: String
    Default: None
    Description: EC2 SSH KeyPair Name
  AppS3Bucket:
    Type: String
    Default: 'dentalwings-elasticbeanstalk-samples-us-west-1'
    Description: BucketName where the Application Zip is located
  AppS3Path:
    Type: String
    Default: 'python-v1.zip'
    Description: BucketPath where the Application Zip is located
  DBUsername:
    Type: String
    Default: omahauser
    Description: Default database user
  DBName:
    Type: String
    Default: omaha
    Description: Default database
  DBPassword:
    Type: String
    Default: OmahaPassword
    Description: Password for default database user
    NoEcho: true
  SentryDSN:
    Type: String
    Default: ''
    Description: SENTRY_DSN
  CUPRequestValidation:
    Type: String
    Default: 'false'
    AllowedValues: [true, false]
    Description: CUP_REQUEST_VALIDATION (Enables Request Validation)
  LogStashHost:
    Type: String
    Default: ''
    Description: LOGSTASH_HOST
  LogStashPort:
    Type: String
    Default: ''
    Description: LOGSTASH_PORT
  ELKHost:
    Type: String
    Default: ''
    Description: ELK_HOST
  ELKPort:
    Type: String
    Default: ''
    Description: ELK_PORT
  EmailSender:
    Type: String
    Default: ''
    Description: EMAIL_SENDER
  EmailRecipients:
    Type: String
    Default: ''
    Description: EMAIL_RECIPIENTS
  CrashTracker:
    Type: String
    Default: 'Sentry'
    AllowedValues: ['Sentry', 'ELK']
    Description: CRASH_TRACKER
  DjangoSettingsModule:
    Type: String
    Default: 'omaha_server.settings_prod'
    Description: settings file which should be used, e.g. omaha_server.settings_prod
  Tags:
    Description: A comma seperated list of key=value pairs
    Type: String
    Default: ''

Outputs:
  BeanstalkApplicationName:
    Value: !Ref OmahaApplication
  EBInit:
    Description: https://docs.aws.amazon.com/de_de/elasticbeanstalk/latest/dg/eb-cli3-install.html
    Value: !Sub
      - 'cd omaha_server; eb init --region "${AWS::Region}" ${AppName}'
      - AppName: !Ref OmahaApplication
  EBDeployPrivate:
    Description: https://docs.aws.amazon.com/de_de/elasticbeanstalk/latest/dg/eb3-deploy.html
    Value: !Sub
      - 'eb deploy ${EnvName}'
      - EnvName: !Ref PrivateOmahaEnvironment
  EBDeployPublic:
    Description: https://docs.aws.amazon.com/de_de/elasticbeanstalk/latest/dg/eb3-deploy.html
    Value: !Sub
      - 'eb deploy ${EnvName}'
      - EnvName: !Ref PublicOmahaEnvironment
  PrivateEnvironment:
    Value: !Ref PrivateOmahaEnvironment
  PrivateUrl:
    Value: !Sub
      - "https://${Hostname}.${DNSZone}/admin"
      - DNSZone: !Ref DNSZoneDomain
        Hostname: !If [UseCustomPrivateDNSHostname, !Ref CustomPrivateDNSHostname, !Sub "${AWS::Region}-${AWS::StackName}-private"]
  PublicEnvironment:
    Value: !Ref PublicOmahaEnvironment
  PublicUrl:
    Value: !Sub
      - "https://${Hostname}.${DNSZone}"
      - DNSZone: !Ref DNSZoneDomain
        Hostname: !If [UseCustomPublicDNSHostname, !Ref CustomPublicDNSHostname, !Sub "${AWS::Region}-${AWS::StackName}-public"]

Mappings:
  # ToDo: move this mapping to a Lambda Function and get the available Zones during launch
  Regions:
    us-east-1: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: true, Subnet5: true, Subnet6: true}
    us-east-2: {Subnet1: true, Subnet2: true, Subnet3: false, Subnet4: false, Subnet5: false, Subnet6: false}
    # us-west-1b is no longer available for new AWS costumers
    us-west-1: {Subnet1: true, Subnet2: false, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    us-west-2: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    ap-northeast-1: {Subnet1: true, Subnet2: true, Subnet3: false, Subnet4: false, Subnet5: false, Subnet6: false}
    ap-northeast-2: {Subnet1: true, Subnet2: true, Subnet3: false, Subnet4: false, Subnet5: false, Subnet6: false}
    ap-northeast-3: {Subnet1: true, Subnet2: false, Subnet3: false, Subnet4: false, Subnet5: false, Subnet6: false}
    ap-southeast-1: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    ap-southeast-2: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    ap-south-1: {Subnet1: true, Subnet2: true, Subnet3: false, Subnet4: false, Subnet5: false, Subnet6: false}
    eu-west-1: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    eu-west-2: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    eu-west-3: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    eu-central-1: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    sa-east-1: {Subnet1: true, Subnet2: true, Subnet3: true, Subnet4: false, Subnet5: false, Subnet6: false}
    ca-central-1: {Subnet1: true, Subnet2: true, Subnet3: false, Subnet4: false, Subnet5: false, Subnet6: false}

Conditions:
  UseCustomPrivateDNSHostname: !Not [!Equals ['', !Ref CustomPrivateDNSHostname]]
  UseCustomPublicDNSHostname: !Not [!Equals ['', !Ref CustomPublicDNSHostname]]
  UseSSHKeyPairName: !Not [!Equals ['None', !Ref SSHKeyPairName]]
  hasTags: !Not [!Equals ['', !Ref Tags]]
  Create1stSubnet: !Equals [!FindInMap [ Regions, !Ref "AWS::Region", "Subnet1" ], true]
  Create2ndSubnet: !Equals [!FindInMap [ Regions, !Ref "AWS::Region", "Subnet2" ], true]
  Create3rdSubnet: !Equals [!FindInMap [ Regions, !Ref "AWS::Region", "Subnet3" ], true]
  Create4thSubnet: !Equals [!FindInMap [ Regions, !Ref "AWS::Region", "Subnet4" ], true]
  Create5thSubnet: !Equals [!FindInMap [ Regions, !Ref "AWS::Region", "Subnet5" ], true]
  Create6thSubnet: !Equals [!FindInMap [ Regions, !Ref "AWS::Region", "Subnet6" ], true]

Resources:
  GetResourceTags:
    Type: Custom::GetParameterAsTags
    Version: 1.0
    DependsOn: InfrastructureStack
    Properties:
      ServiceToken: !GetAtt InfrastructureStack.Outputs.TagParser
      data: !Ref Tags

  InfrastructureStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.ca-central-1.amazonaws.com/dentalwings-cloudformation-templates/aws-cloudformation-vpc-setup/cloudformation_vpc_creation.yml
      Parameters:
        Tags: !If [hasTags, !Ref Tags, !Ref "AWS::NoValue"]

  RDSSubnet0:
    Type: 'AWS::EC2::Subnet'
    Condition: Create1stSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [200, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  RDSSubnet1:
    Type: 'AWS::EC2::Subnet'
    Condition: Create2ndSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [201, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  RDSSubnet2:
    Type: 'AWS::EC2::Subnet'
    Condition: Create3rdSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [202, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  RDSSubnet3:
    Type: 'AWS::EC2::Subnet'
    Condition: Create4thSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 3, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [203, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  RDSSubnet4:
    Type: 'AWS::EC2::Subnet'
    Condition: Create5thSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 4, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [204, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  RDSSubnet5:
    Type: 'AWS::EC2::Subnet'
    Condition: Create6thSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 5, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [205, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  RDSSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "RDS Subnet Group"
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      SubnetIds:
        - !If [ Create1stSubnet, !Ref RDSSubnet0, !Ref "AWS::NoValue"]
        - !If [ Create2ndSubnet, !Ref RDSSubnet1, !Ref "AWS::NoValue"]
        - !If [ Create3rdSubnet, !Ref RDSSubnet2, !Ref "AWS::NoValue"]
        - !If [ Create4thSubnet, !Ref RDSSubnet3, !Ref "AWS::NoValue"]
        - !If [ Create5thSubnet, !Ref RDSSubnet4, !Ref "AWS::NoValue"]
        - !If [ Create6thSubnet, !Ref RDSSubnet5, !Ref "AWS::NoValue"]

  CacheSubnet0:
    Type: 'AWS::EC2::Subnet'
    Condition: Create1stSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [210, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  CacheSubnet1:
    Type: 'AWS::EC2::Subnet'
    Condition: Create2ndSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [211, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  CacheSubnet2:
    Type: 'AWS::EC2::Subnet'
    Condition: Create3rdSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [212, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  CacheSubnet3:
    Type: 'AWS::EC2::Subnet'
    Condition: Create4thSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 3, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [213, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  CacheSubnet4:
    Type: 'AWS::EC2::Subnet'
    Condition: Create5thSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 4, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [214, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  CacheSubnet5:
    Type: 'AWS::EC2::Subnet'
    Condition: Create6thSubnet
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      AvailabilityZone: !Select [ 5, !GetAZs '' ]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      CidrBlock: !Select [215, !Cidr [!GetAtt InfrastructureStack.Outputs.VPCCIDR , 256, 8]]
  CacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: "Cache Subnet Group"
      SubnetIds:
      - !If [ Create1stSubnet, !Ref CacheSubnet0, !Ref "AWS::NoValue"]
      - !If [ Create2ndSubnet, !Ref CacheSubnet1, !Ref "AWS::NoValue"]
      - !If [ Create3rdSubnet, !Ref CacheSubnet2, !Ref "AWS::NoValue"]
      - !If [ Create4thSubnet, !Ref CacheSubnet3, !Ref "AWS::NoValue"]
      - !If [ Create5thSubnet, !Ref CacheSubnet4, !Ref "AWS::NoValue"]
      - !If [ Create6thSubnet, !Ref CacheSubnet5, !Ref "AWS::NoValue"]

  ###### SecurityGroups ######
  PostgresAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      GroupDescription: Allows access postgres instance
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
  PostgresSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
      - ToPort: '5432'
        IpProtocol: tcp
        FromPort: '5432'
        SourceSecurityGroupId: !Ref PostgresAccessSecurityGroup
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      GroupDescription: postgres instance source
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
  CacheAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "This SG gives acces to the caching service"
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
  CacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Cache Security Group, allows acces from CacheAccessSecurityGroup"
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "6379"
          ToPort: "6379"
          SourceSecurityGroupId: !Ref CacheAccessSecurityGroup
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]

  ###### PostgreSQL Database #######
  RDS:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: '30'
      Engine: 'postgres'
      DBInstanceClass: !Ref DBInstanceType
      DBName: !Ref DBName
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      VPCSecurityGroups:
        - !Ref PostgresSecurityGroup

  ###### Redis Cache ######
  RedisCache:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      Engine: redis
      NumCacheNodes: !Ref RedisClusterNodes
      CacheNodeType: !Ref RedisInstanceType
      CacheSubnetGroupName: !Ref CacheSubnetGroup
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      VpcSecurityGroupIds:
        - !GetAtt CacheSecurityGroup.GroupId

  # ACM SSL Cert
  ACMOmahaPrivateSSLCert:
    Type: 'Custom::ACMCertificate'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt ACMApproverFunction.Arn
      DomainName: !If [UseCustomPrivateDNSHostname, !Ref CustomPrivateDNSHostname, !Sub "${AWS::Region}-${AWS::StackName}-private"]
      DomainSuffix: !Ref DNSZoneDomain
      HostedZoneId: !Ref DNSZoneId
  ACMOmahaPublicSSLCert:
    Type: 'Custom::ACMCertificate'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt ACMApproverFunction.Arn
      DomainName: !If [UseCustomPublicDNSHostname, !Ref CustomPublicDNSHostname, !Sub "${AWS::Region}-${AWS::StackName}-public"]
      DomainSuffix: !Ref DNSZoneDomain
      HostedZoneId: !Ref DNSZoneId

  ###### S3 Bucket #######
  OmahaS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join ['-', [!Ref 'AWS::Region', !Ref 'AWS::StackName', 's3bucket']]
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]

  OmahaS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref OmahaS3Bucket
      PolicyDocument:
        Statement:
          -
            Action:
              - "*"
            Effect: "Allow"
            Principal:
              AWS: !GetAtt OmahaRole.Arn
            Resource:
              Fn::Join:
                - ""
                -
                  - !GetAtt OmahaS3Bucket.Arn
                  - "/*"
          -
            Action:
              - "*"
            Effect: "Allow"
            Principal:
              AWS: !GetAtt OmahaRole.Arn
            Resource: !GetAtt OmahaS3Bucket.Arn

  OmahaInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      InstanceProfileName: !Join ['-', [!Ref 'AWS::Region', !Ref 'AWS::StackName', 'instance-profile']]
      Roles:
        - !Ref OmahaRole

  OmahaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref 'AWS::Region', !Ref 'AWS::StackName', 'role']]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:
                  - Fn::Join:
                    - ''
                    - - !GetAtt OmahaS3Bucket.Arn
                      - "/*"
  EBPrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !GetAtt InfrastructureStack.Outputs.VPC
      GroupDescription: Empty SecurityGroup for private Env, you need to manage this manually for now
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]

  ###### Elastic Beanstalk ######
  OmahaApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      Description: Omaha Server
  OmahaConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName: !Ref OmahaApplication
      Description: AWS ElasticBeanstalk Sample Configuration Template
      SolutionStackName: "64bit Amazon Linux 2018.03 v2.7.7 running Python 2.7"
      OptionSettings:
      - Namespace: aws:ec2:vpc
        OptionName: VPCId
        Value: !GetAtt InfrastructureStack.Outputs.VPC
      - Namespace: aws:ec2:vpc
        OptionName: Subnets
        Value: !GetAtt InfrastructureStack.Outputs.PublicSubnets
      - Namespace: aws:ec2:vpc
        OptionName: ELBSubnets
        Value: !GetAtt InfrastructureStack.Outputs.PublicSubnets
      - Namespace: aws:autoscaling:asg
        OptionName: MinSize
        Value: !Ref OmahaASGMinSize
      - Namespace: aws:autoscaling:asg
        OptionName: MaxSize
        Value: !Ref OmahaASGMaxSize
      - Namespace: aws:elasticbeanstalk:application
        OptionName: Application Healthcheck URL
        Value: '/healthcheck/status/'
      - Namespace: aws:autoscaling:trigger
        OptionName: BreachDuration
        Value: 300
      - Namespace: aws:autoscaling:trigger
        OptionName: MeasureName
        Value: CPUUtilization
      - Namespace: aws:autoscaling:trigger
        OptionName: Unit
        Value: Percent
      - Namespace: aws:autoscaling:trigger
        OptionName: LowerThreshold
        Value: 20
      - Namespace: aws:autoscaling:trigger
        OptionName: UpperThreshold
        Value: 70
      - Namespace: aws:autoscaling:trigger
        OptionName: UpperBreachScaleIncrement
        Value: 1
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: InstanceType
        Value: !Ref OmahaInstanceType
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: EC2KeyName
        Value: !If [UseSSHKeyPairName, !Ref SSHKeyPairName, !Ref "AWS::NoValue"]
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: SecurityGroups
        Value: !Join [',', [!GetAtt PostgresAccessSecurityGroup.GroupId, !GetAtt CacheAccessSecurityGroup.GroupId]]
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: IamInstanceProfile
        Value: !Ref OmahaInstanceProfile
      - Namespace: aws:elasticbeanstalk:environment
        OptionName: EnvironmentType
        Value: LoadBalanced
      # ENVIRONMENT VARIABLES - COMMON TO ALL STACKS
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: AWS_REGION
        Value: !Ref AWS::Region
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: AWS_DEFAULT_REGION
        Value: !Ref AWS::Region
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: AWS_STORAGE_BUCKET_NAME
        Value: !Ref OmahaS3Bucket
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: DB_PUBLIC_USER
        Value: "omaha_public"
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: DB_PUBLIC_PASSWORD
        Value: "omaha_public_password"
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: AWS_ROLE
        Value: !Ref OmahaRole
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: REDIS_HOST
        Value: !GetAtt RedisCache.RedisEndpoint.Address
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: REDIS_PORT
        Value: !GetAtt RedisCache.RedisEndpoint.Port
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: DB_HOST
        Value: !GetAtt RDS.Endpoint.Address
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: DB_PORT
        Value: !GetAtt RDS.Endpoint.Port
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: DB_USER
        Value: !Ref DBUsername
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: DB_PASSWORD
        Value: !Ref DBPassword
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: DB_NAME
        Value: !Ref DBName
      - Namespace: 'aws:elasticbeanstalk:application:environment'
        OptionName: SECRET_KEY
        Value: !Ref OmahaSecretKey
      - Namespace: 'aws:elasticbeanstalk:application:environment'
        OptionName: SENTRY_DSN
        Value: !Ref SentryDSN
      - Namespace: 'aws:elasticbeanstalk:application:environment'
        OptionName: OMAHA_ONLY_HTTPS
        Value: 'true'
      - Namespace: 'aws:elasticbeanstalk:application:environment'
        OptionName: DJANGO_SETTINGS_MODULE
        Value: !Ref DjangoSettingsModule
      - Namespace: 'aws:elasticbeanstalk:application:environment'
        OptionName: CUP_REQUEST_VALIDATION
        Value: !Ref CUPRequestValidation
      - Namespace: 'aws:elasticbeanstalk:application:environment'
        OptionName: CRASH_TRACKER
        Value: !Ref CrashTracker
      - Namespace: 'aws:elasticbeanstalk:application:environment'
        OptionName: LOGSTASH_HOST
        Value: !Ref LogStashHost
      - Namespace: 'aws:elasticbeanstalk:application:environment'
        OptionName: LOGSTASH_PORT
        Value: !Ref LogStashPort
      - Namespace: 'aws:elasticbeanstalk:application:environment'
        OptionName: ELK_HOST
        Value: !Ref ELKHost
      - Namespace: 'aws:elasticbeanstalk:application:environment'
        OptionName: ELK_PORT
        Value: !Ref ELKPort
      - Namespace: 'aws:elasticbeanstalk:application:environment'
        OptionName: EMAIL_SENDER
        Value: !Ref EmailSender
      - Namespace: 'aws:elasticbeanstalk:application:environment'
        OptionName: EMAIL_RECIPIENTS
        Value: !Ref EmailRecipients
      - Namespace: 'aws:elasticbeanstalk:application:environment'
        OptionName: REDIS_DB
        Value: !Ref RedisDB
      - Namespace: 'aws:elasticbeanstalk:application:environment'
        OptionName: REDIS_STAT_DB
        Value: !Ref RedisStatDB

  OmahaApplicationVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref OmahaApplication
      Description: AWS ElasticBeanstalk Sample Python Application Version
      SourceBundle:
        S3Bucket: !Ref AppS3Bucket
        S3Key: !Ref AppS3Path

  PrivateOmahaEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref OmahaApplication
      Description: Omaha Private
      TemplateName: !Ref OmahaConfigurationTemplate
      VersionLabel: !Ref OmahaApplicationVersion
      OptionSettings:
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: OMAHA_SERVER_PRIVATE
        Value: 'true'
      - Namespace: 'aws:elasticbeanstalk:application:environment'
        OptionName: HOST_NAME
        Value: !Sub
          - "${Hostname}.${DNSZone}"
          - DNSZone: !Ref DNSZoneDomain
            Hostname: !If [UseCustomPrivateDNSHostname, !Ref CustomPrivateDNSHostname, !Sub "${AWS::Region}-${AWS::StackName}-private"]
      - Namespace: aws:elb:loadbalancer
        OptionName: LoadBalancerHTTPSPort
        Value: 443
      - Namespace: aws:elb:loadbalancer
        OptionName: LoadBalancerSSLPortProtocol
        Value: HTTPS
      - Namespace: aws:elb:loadbalancer
        OptionName: SSLCertificateId
        Value: !Ref ACMOmahaPrivateSSLCert
      - Namespace: aws:elb:loadbalancer
        OptionName: SecurityGroups
        Value: !GetAtt EBPrivateSecurityGroup.GroupId
      - Namespace: aws:elb:loadbalancer
        OptionName: ManagedSecurityGroup
        Value: !Ref EBPrivateSecurityGroup

  OmahaPrivateDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNSZoneId
      Name: !Sub
        - "${Hostname}.${DNSZone}"
        - DNSZone: !Ref DNSZoneDomain
          Hostname: !If [UseCustomPrivateDNSHostname, !Ref CustomPrivateDNSHostname, !Sub "${AWS::Region}-${AWS::StackName}-private"]
      Type: CNAME
      TTL: 3600
      ResourceRecords:
        - !GetAtt PrivateOmahaEnvironment.EndpointURL

  PublicOmahaEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref OmahaApplication
      Description: Omaha Public
      TemplateName: !Ref OmahaConfigurationTemplate
      VersionLabel: !Ref OmahaApplicationVersion
      OptionSettings:
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: OMAHA_SERVER_PRIVATE
        Value: 'false'
      - Namespace: 'aws:elasticbeanstalk:application:environment'
        OptionName: HOST_NAME
        Value: !Sub
          - "${Hostname}.${DNSZone}"
          - DNSZone: !Ref DNSZoneDomain
            Hostname: !If [UseCustomPublicDNSHostname, !Ref CustomPublicDNSHostname, !Sub "${AWS::Region}-${AWS::StackName}-public"]
      - Namespace: aws:elb:loadbalancer
        OptionName: LoadBalancerHTTPSPort
        Value: 443
      - Namespace: aws:elb:loadbalancer
        OptionName: LoadBalancerSSLPortProtocol
        Value: HTTPS
      - Namespace: aws:elb:loadbalancer
        OptionName: SSLCertificateId
        Value: !Ref ACMOmahaPublicSSLCert

  OmahaPublicDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNSZoneId
      Name: !Sub
        - "${Hostname}.${DNSZone}"
        - DNSZone: !Ref DNSZoneDomain
          Hostname: !If [UseCustomPublicDNSHostname, !Ref CustomPublicDNSHostname, !Sub "${AWS::Region}-${AWS::StackName}-public"]
      Type: CNAME
      TTL: 3600
      ResourceRecords:
        - !GetAtt PublicOmahaEnvironment.EndpointURL

  ####### SSL Certificate approval helper ######
  ACMApproverRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "ACMCFNLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "acm:*"
                  - "route53:*"
                Resource: "*"

  ACMApproverFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import sys,os,json,datetime,boto3,traceback,time,hashlib
          from botocore.vendored import requests
          from datetime import date, datetime
          def json_serial(obj):
              if isinstance(obj, (datetime, date)):
                  return obj.isoformat()
              raise TypeError ("Type %s not serializable" % type(obj))
          def cfn_response(url, body):
              headers = {'content-type' : '','content-length' : str(len(body))}
              response = requests.put(url,data=body,headers=headers)
          def acm_certificate(event, context):
              print "Got %s" % json.dumps(event, default=json_serial)
              if event['RequestType'] in ['Create','Update']:
                  cfn_response(event['ResponseURL'], _create_acm_certificate(event))
              else:
                  cfn_response(event['ResponseURL'], _delete_acm_certificate(event))
          def _create_acm_certificate(event):
              acm = boto3.client('acm')
              ret = {}
              ret['StackId'] = event['StackId']
              ret['RequestId'] = event['RequestId']
              ret['LogicalResourceId'] = event['LogicalResourceId']
              rp = event['ResourceProperties']
              try:
                  cs = rp['DomainSuffix'].rstrip('.')
                  dn = "%s.%s" % (rp['DomainName'].rstrip('.'), cs)
                  san = dn
                  if len(dn) > 62:
                      hashlen = 62-len(cs)
                      ch = hashlib.sha256(dn).hexdigest()[-hashlen:]
                      dn = "%s.%s" % (ch, cs)
                  response = acm.list_certificates(
                      CertificateStatuses=['PENDING_VALIDATION','ISSUED']
                  )
                  cert_arn = None
                  for cert in response['CertificateSummaryList']:
                      print "existing cert: %s" % cert['DomainName']
                      if cert['DomainName'] == dn:
                          cert_arn = cert['CertificateArn']
                  if not cert_arn:
                      response = acm.request_certificate(
                          DomainName=dn,
                          ValidationMethod='DNS',
                          IdempotencyToken=event['LogicalResourceId'],
                          SubjectAlternativeNames = [san]
                      )
                      cert_arn = response['CertificateArn']
                      time.sleep(10)
                  response = acm.describe_certificate(
                      CertificateArn=cert_arn
                  )
                  r53_c = []
                  for vo in response['Certificate']['DomainValidationOptions']:
                      rr = vo['ResourceRecord']
                      r53_c.append({'Action':'UPSERT','ResourceRecordSet':{'Name': rr['Name'],'Type': rr['Type'],'TTL': 3600,'ResourceRecords': [{'Value': rr['Value']}]}})
                  r53 = boto3.client('route53')
                  response = r53.change_resource_record_sets(
                      HostedZoneId=rp['HostedZoneId'],
                      ChangeBatch={'Comment':'Auth','Changes':r53_c}
                  )
                  time.sleep(220)
                  ret['PhysicalResourceId'] = cert_arn
                  ret['Data'] = {}
                  ret['Data']['CertificateArn'] = cert_arn
                  ret['Status'] = 'SUCCESS'
              except:
                  traceback.print_exc()
                  ret['Status'] = 'FAILED'
                  ret['Reason'] = 'Good question'
              finally:
                  cfn_response(event['ResponseURL'], json.dumps(ret))
              return json.dumps(ret)

          def _delete_acm_certificate(event):
              acm = boto3.client('acm')
              ret = {}
              ret['StackId'] = event['StackId']
              ret['RequestId'] = event['RequestId']
              ret['LogicalResourceId'] = event['LogicalResourceId']
              ret['PhysicalResourceId'] = event['PhysicalResourceId']
              try:
                  response = acm.delete_certificate(
                      CertificateArn=event['PhysicalResourceId']
                  )
                  print "got response %s" % json.dumps(response, default=json_serial)
                  ret['Status'] = 'SUCCESS'
              except:
                  traceback.print_exc()
                  ret['Status'] = 'SUCCESS'
                  ret['Reason'] = 'Good question'
              finally:
                  cfn_response(event['ResponseURL'], json.dumps(ret))

              return json.dumps(ret)
      Description: Cloudformation Custom Resource for ACM certs using Route53 approval
      Tags: !If [hasTags, !GetAtt GetResourceTags.result, !Ref "AWS::NoValue"]
      Handler: index.acm_certificate
      MemorySize: 256
      Runtime: python2.7
      Timeout: 300
      Role:
        Fn::GetAtt: ACMApproverRole.Arn
